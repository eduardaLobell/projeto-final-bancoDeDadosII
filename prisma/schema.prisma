generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Usuario {
    id        String  @id @default(uuid()) @db.Uuid
    nome      String  @db.VarChar(100)
    email     String  @unique @db.VarChar(80)
    username  String  @unique @db.VarChar(15)
    senha     String  @db.VarChar(100)
    authToken String? @map("auth_token") @db.Text

    criadoEm     DateTime @default(now()) @map("criado_em")
    atualizadoEm DateTime @updatedAt @map("atualizado_em")

    tweet        Tweet[]
    segue        Seguidor[] @relation("segue")
    seguido      Seguidor[] @relation("seguido")
    usernameLike Like?
    dono         Reply[]
    usernamReply Reply[]


    @@map("usuario")
}

model Tweet {
    id       String @id @default(uuid()) @db.Uuid
    conteudo String @db.VarChar(200)
    tipo     Int    @db.Integer

    idUsuario String  @unique @map("id_usuario") @db.Uuid
    usuario   Usuario @relation(fields: [idUsuario], references: [id])

    criadoEm     DateTime @default(now()) @map("criado_em")
    atualizadoEm DateTime @updatedAt @map("atualizado_em")

    like       Like[]
    tweet      ReTweet[] @relation("tweet")
    reTweet    ReTweet[] @relation("re_tweet")
    tweetReply Reply[] @relation("id_tweet")

    @@map("tweet")
}

model Like {
    id String @id @default(uuid()) @db.Uuid

    usernameUsuario String  @unique @db.VarChar(15)
    username        Usuario @relation(fields: [usernameUsuario], references: [username])

    idTweet String @unique @map("id_tweet") @db.Uuid
    tweet   Tweet  @relation(fields: [idTweet], references: [id])

    criadoEm     DateTime @default(now()) @map("criado_em")
    atualizadoEm DateTime @updatedAt @map("atualizado_em")

    @@map("like")
}

model ReTweet {
    idTweet String @unique @map("id_tweet") @db.Uuid
    tweet   Tweet  @relation("tweet", fields: [idTweet], references: [id])

    idReTweet String @unique @map("id_retweet") @db.Uuid
    reTweet   Tweet  @relation("re_tweet", fields: [idReTweet], references: [id])

    criadoEm     DateTime @default(now()) @map("criado_em")
    atualizadoEm DateTime @updatedAt @map("atualizado_em")

    @@map("retweet")
}

model Seguidor {
    id String @id @default(uuid()) @db.Uuid

    idUsuario String  @unique @map("id_usuario") @db.Uuid // é o que vai ser seguido
    usuario   Usuario @relation("seguido", fields: [idUsuario], references: [id])

    idSeguidor String  @unique @map("id_seguidor") @db.Uuid // este é o que vai seguir o usuario - quem segue
    seguidor   Usuario @relation("segue", fields: [idSeguidor], references: [id])

    criadoEm     DateTime @default(now()) @map("criado_em")
    atualizadoEm DateTime @updatedAt @map("atualizado_em")

    @@map("seguidor")
}

model Reply {
    id String @id @default(uuid()) @db.Uuid

    idUsuario String  @unique @map("id_usuario") @db.Uuid
    usuario   Usuario @relation("dono", fields: [idUsuario], references: [id])

    username      String  @unique @db.VarChar(15)
    usernameReply Usuario @relation("username", fields: [username], references: [username])

    mensagem String @db.VarChar(250)

    idTweet String String @db.Uuid @unique @map("id_tweet")
    tweetReply Tweet @relation("id_tweet", fields: [idTweet], references: [id])

    @@map("reply")
}
